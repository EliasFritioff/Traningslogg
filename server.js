// server.js

const express = require("express");
const fs = require("fs");
const path = require("path");
const app = express();
const PORT = 3000;

app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Server static files (HTML, CSS, JS, IMG)
app.use(express.static(__dirname));

// SÃ¶kvÃ¤gar till JSON-filer
const usersPath = path.join(__dirname, "data", "users.json");
const exercisesPath = path.join(__dirname, "data", "exercises.json");

// === ANVÃ„NDARE ===
// HÃ¤mta alla anvÃ¤ndare
app.get("/api/users", (req, res) => {
    fs.readFile(usersPath, "utf8", (err, data) => {
        if (err) {
            console.error("Fel vid lÃ¤sning av users.json:", err);
            return res.status(500).json({ error: "Kunde inte lÃ¤sa filen." });
        }
        res.json(JSON.parse(data));
    });
});

// Registrera ny anvÃ¤ndare
app.post("/api/register", (req, res) => {
    const { email, username, password } = req.body;

    fs.readFile(usersPath, "utf8", (err, data) => {
        if (err) {
            console.error("Fel vid lÃ¤sning av users.json:", err);
            return res.status(500).json({ error: "Kunde inte lÃ¤sa filen." });
        }

        const users = JSON.parse(data);

        const existingUser = users.find(user => user.email === email);
        if (existingUser) {
            return res.status(400).json({ error: "AnvÃ¤ndaren finns redan!" });
        }

        const newUser = { email, username, password };
        users.push(newUser);

        fs.writeFile(usersPath, JSON.stringify(users, null, 2), (err) => {
            if (err) {
                console.error("Fel vid skrivning till users.json:", err);
                return res.status(500).json({ error: "Kunde inte spara anvÃ¤ndaren." });
            }
            res.status(201).json({ message: "Registreringen lyckades!" });
        });
    });
});

// === Ã–VNINGAR ===
// HÃ¤mta alla Ã¶vningar
app.get("/api/exercises", (req, res) => {
    fs.readFile(exercisesPath, "utf8", (err, data) => {
        if (err) {
            console.error("Fel vid lÃ¤sning av exercises.json:", err);
            return res.status(500).json({ error: "Kunde inte lÃ¤sa Ã¶vningar." });
        }
        res.json(JSON.parse(data));
    });
});

// LÃ¤gg till en ny Ã¶vning
app.post("/api/exercises", (req, res) => {
    const newExercise = req.body;

    fs.readFile(exercisesPath, "utf8", (err, data) => {
        if (err) {
            console.error("Fel vid lÃ¤sning av exercises.json:", err);
            return res.status(500).json({ error: "Kunde inte lÃ¤sa Ã¶vningar." });
        }

        const exercises = JSON.parse(data);
        exercises.push(newExercise);

        fs.writeFile(exercisesPath, JSON.stringify(exercises, null, 2), (err) => {
            if (err) {
                console.error("Fel vid skrivning till exercises.json:", err);
                return res.status(500).json({ error: "Kunde inte spara Ã¶vning." });
            }
            res.status(201).json({ message: "Ã–vning sparad!" });
        });
    });
});

// === SPARA TRÃ„NINGSPASS ===
const historyPath = path.join(__dirname, "data", "history.json");

app.post("/api/save-workout", (req, res) => {
    const newWorkout = req.body;

    fs.readFile(historyPath, "utf8", (err, data) => {
        let history = [];
        if (!err && data) {
            try {
                history = JSON.parse(data);
            } catch (parseErr) {
                console.error("Kunde inte parsa history.json:", parseErr);
            }
        }

        history.unshift(newWorkout); // senaste fÃ¶rst

        fs.writeFile(historyPath, JSON.stringify(history, null, 2), (err) => {
            if (err) {
                console.error("Fel vid sparning av trÃ¤ningspass:", err);
                return res.status(500).json({ error: "Kunde inte spara trÃ¤ningspass." });
            }
            res.status(201).json({ message: "TrÃ¤ningspass sparat!" });
        });
    });
});

// Radera ett trÃ¤ningspass frÃ¥n historiken
app.delete("/api/delete-workout/:index", (req, res) => {
    const index = parseInt(req.params.index, 10);

    fs.readFile(historyPath, "utf8", (err, data) => {
        if (err) {
            console.error("Fel vid lÃ¤sning av history.json:", err);
            return res.status(500).json({ error: "Kunde inte lÃ¤sa historik." });
        }
        let history = [];
        try {
            history = JSON.parse(data);
        } catch (parseErr) {
            console.error("Kunde inte parsa history.json:", parseErr);
            return res.status(500).json({ error: "Kunde inte tolka historik." });
        }

        if (index < 0 || index >= history.length) {
            return res.status(400).json({ error: "Felaktigt index." });
        }

        history.splice(index, 1);

        fs.writeFile(historyPath, JSON.stringify(history, null, 2), (err) => {
            if (err) {
                console.error("Fel vid skrivning till history.json:", err);
                return res.status(500).json({ error: "Kunde inte spara Ã¤ndrad historik." });
            }
            res.json({ message: "TrÃ¤ningspass raderat!" });
        });
    });
});

// Starta servern
app.listen(PORT, () => {
    console.log(`ğŸš€ Servern kÃ¶rs pÃ¥ http://localhost:${PORT}`);
});
